workout_api/
├── main.py
├── models.py
├── database.py
├── schemas.py
├── crud.py
├── exceptions.py
└── controllers/
    └── workout_controller.py
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

SQLALCHEMY_DATABASE_URL = "sqlite:///./test.db"

engine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
from sqlalchemy import Column, Integer, String, Float, DateTime
from .database import Base
from datetime import datetime

class Product(Base):
    __tablename__ = "products"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, index=True)
    price = Column(Float)
    updated_at = Column(DateTime, default=datetime.utcnow)
from pydantic import BaseModel
from typing import Optional
from datetime import datetime

class ProductBase(BaseModel):
    name: str
    price: float

class ProductCreate(ProductBase):
    pass

class ProductUpdate(ProductBase):
    updated_at: Optional[datetime]

class Product(ProductBase):
    id: int
    updated_at: datetime

    class Config:
        orm_mode = True
from sqlalchemy.orm import Session
from . import models, schemas
from datetime import datetime

def get_product(db: Session, product_id: int):
    return db.query(models.Product).filter(models.Product.id == product_id).first()

def create_product(db: Session, product: schemas.ProductCreate):
    db_product = models.Product(**product.dict())
    db.add(db_product)
    db.commit()
    db.refresh(db_product)
    return db_product

def update_product(db: Session, product_id: int, product: schemas.ProductUpdate):
    db_product = get_product(db, product_id)
    if not db_product:
        return None
    for key, value in product.dict(exclude_unset=True).items():
        setattr(db_product, key, value)
    db_product.updated_at = datetime.utcnow()
    db.commit()
    db.refresh(db_product)
    return db_product

def get_products(db: Session, min_price: float = None, max_price: float = None):
    query = db.query(models.Product)
    if min_price is not None:
        query = query.filter(models.Product.price > min_price)
    if max_price is not None:
        query = query.filter(models.Product.price < max_price)
    return query.all()
from fastapi import HTTPException

def product_not_found_exception():
    return HTTPException(status_code=404, detail="Product not found")

def database_insert_error_exception():
    return HTTPException(status_code=400, detail="Error inserting into database")
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from .. import schemas, crud, models, exceptions
from ..database import get_db

router = APIRouter()

@router.post("/products/", response_model=schemas.Product)
def create_product(product: schemas.ProductCreate, db: Session = Depends(get_db)):
    try:
        return crud.create_product(db, product)
    except Exception as e:
        raise exceptions.database_insert_error_exception()

@router.patch("/products/{product_id}", response_model=schemas.Product)
def update_product(product_id: int, product: schemas.ProductUpdate, db: Session = Depends(get_db)):
    db_product = crud.update_product(db, product_id, product)
    if db_product is None:
        raise exceptions.product_not_found_exception()
    return db_product

@router.get("/products/", response_model=list[schemas.Product])
def read_products(min_price: float = None, max_price: float = None, db: Session = Depends(get_db)):
    products = crud.get_products(db, min_price, max_price)
    return products
from fastapi import FastAPI
from .database import engine
from . import models
from .controllers import workout_controller

models.Base.metadata.create_all(bind=engine)

app = FastAPI(title="Workout API")

app.include_router(workout_controller.router)
